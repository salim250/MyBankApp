// <auto-generated />
using System;
using JwtAuthDemo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JwtAuthDemo.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220912161343_thirdMigration")]
    partial class thirdMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "6.0.0-preview.3.21201.2");

            modelBuilder.Entity("JwtAuthDemo.Models.DemandeCarte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("clientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateDemande")
                        .HasColumnType("datetime");

                    b.Property<string>("etat")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("clientId");

                    b.ToTable("DemandeCartes");
                });

            modelBuilder.Entity("JwtAuthDemo.Models.DemandeChequier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("clientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateDemande")
                        .HasColumnType("datetime");

                    b.Property<string>("etat")
                        .HasColumnType("text");

                    b.Property<int>("nombre")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("clientId");

                    b.ToTable("DemandeChequiers");
                });

            modelBuilder.Entity("JwtAuthDemo.Models.Solde", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("clientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime");

                    b.Property<int>("montantRetire")
                        .HasColumnType("int");

                    b.Property<int>("montantVerse")
                        .HasColumnType("int");

                    b.Property<string>("operation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("clientId");

                    b.ToTable("Soldes");
                });

            modelBuilder.Entity("JwtAuthDemo.Models.Transfert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("clientDebiteurId")
                        .HasColumnType("int");

                    b.Property<int?>("clientRecepteurId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime");

                    b.Property<int>("montant")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("clientDebiteurId");

                    b.HasIndex("clientRecepteurId");

                    b.ToTable("Transferts");
                });

            modelBuilder.Entity("JwtAuthDemo.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("nom")
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<string>("prenom")
                        .HasColumnType("text");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("JwtAuthDemo.Models.Virement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("compteACrediter")
                        .HasColumnType("int");

                    b.Property<int>("compteDebiteur")
                        .HasColumnType("int");

                    b.Property<int>("montant")
                        .HasColumnType("int");

                    b.Property<string>("motif")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Virements");
                });

            modelBuilder.Entity("JwtAuthDemo.Models.Client", b =>
                {
                    b.HasBaseType("JwtAuthDemo.Models.User");

                    b.Property<int>("NumeroCompte")
                        .HasColumnType("int");

                    b.Property<int>("cin")
                        .HasColumnType("int");

                    b.Property<int>("solde")
                        .HasColumnType("int");

                    b.HasIndex("NumeroCompte")
                        .IsUnique();

                    b.ToTable("Client");
                });

            modelBuilder.Entity("JwtAuthDemo.Models.DemandeCarte", b =>
                {
                    b.HasOne("JwtAuthDemo.Models.Client", "client")
                        .WithMany("demandeCarte")
                        .HasForeignKey("clientId");

                    b.Navigation("client");
                });

            modelBuilder.Entity("JwtAuthDemo.Models.DemandeChequier", b =>
                {
                    b.HasOne("JwtAuthDemo.Models.Client", "client")
                        .WithMany("demandeChequier")
                        .HasForeignKey("clientId");

                    b.Navigation("client");
                });

            modelBuilder.Entity("JwtAuthDemo.Models.Solde", b =>
                {
                    b.HasOne("JwtAuthDemo.Models.Client", "client")
                        .WithMany("extrait")
                        .HasForeignKey("clientId");

                    b.Navigation("client");
                });

            modelBuilder.Entity("JwtAuthDemo.Models.Transfert", b =>
                {
                    b.HasOne("JwtAuthDemo.Models.Client", "clientDebiteur")
                        .WithMany("transfertDebiteur")
                        .HasForeignKey("clientDebiteurId");

                    b.HasOne("JwtAuthDemo.Models.Client", "clientRecepteur")
                        .WithMany("transfertRecepteur")
                        .HasForeignKey("clientRecepteurId");

                    b.Navigation("clientDebiteur");

                    b.Navigation("clientRecepteur");
                });

            modelBuilder.Entity("JwtAuthDemo.Models.Client", b =>
                {
                    b.HasOne("JwtAuthDemo.Models.User", null)
                        .WithOne()
                        .HasForeignKey("JwtAuthDemo.Models.Client", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JwtAuthDemo.Models.Client", b =>
                {
                    b.Navigation("demandeCarte");

                    b.Navigation("demandeChequier");

                    b.Navigation("extrait");

                    b.Navigation("transfertDebiteur");

                    b.Navigation("transfertRecepteur");
                });
#pragma warning restore 612, 618
        }
    }
}
